# -*- coding: utf-8 -*-
"""practice panther test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NOBmxbX7UfJZD3Q1jS94Qtsfpw_B-76U
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# filename
filename = 'Migration_Interview_Data (Python) - Migration_Interview_Data (1).csv'

# 1. Read the file and change name to 'data'
data = pd.read_csv(filename)

data.info()

# 2. Remove duplicate rows
data = data.drop_duplicates()
display(data)

# 3. Modify column headers: prefix with "Contact: "
data.columns = [f'Contact: {col}' for col in data.columns]
display(data)

# 4. Standardize Name Formatting (proper case for name columns)
name_columns = [col for col in data.columns if 'name' in col.lower()]
for col in name_columns:
    data[col] = data[col].astype(str).str.title()

import re

bday_col = 'Contact: Date of Birth'

def ddmmyyyy_to_mmddyyyy(date_str):
    """Convert DD/MM/YYYY to MM/DD/YYYY ; else return as is."""
    if pd.isnull(date_str):
        return ''
    date_str = str(date_str).strip()
    # Match pattern DD/MM/YYYY
    match = re.match(r'^(\d{1,2})/(\d{1,2})/(\d{4})$', date_str)
    if match:
        day, month, year = match.groups()
        # Make sure MM and DD are always two digits
        return f"{month.zfill(2)}/{day.zfill(2)}/{year}"
    else:
        return date_str  # For already formatted or invalid values

# Apply conversion to the entire column
data[bday_col] = data[bday_col].apply(ddmmyyyy_to_mmddyyyy)

# Check results
display(data[bday_col].head())

# 6. Generate Unique Numeric IDs (1 to N, max 1,000,000)
num_rows = len(data)
if num_rows > 1_000_000:
    raise ValueError("More than 1,000,000 unique contacts! Reduce your data size.")
if 'Contact: ID' in data.columns:
    data = data.drop(columns=['Contact: ID'])
data.insert(0, 'Contact: ID', range(1, num_rows + 1))

# 7. Adjust the "Contact: Assigned" column
assigned_col = 'Contact: Assigned'
assigned_map = {
    'GM': 'Gabe Michel',
    'AA': 'Aaron Artsen',
    'BL': 'Bond Liver',
    'IC': 'Individual Contributor',
    'TM': 'Tim Mint'
}

def map_assigned(val):
    val = str(val).strip().upper()  # Uppercase for matching
    if val in assigned_map:
        return assigned_map[val]
    if val == '' or val.lower() == 'nan':
        return 'Gabe Michel'
    return 'Gabe Michel'  # Default for any unexpected value

if assigned_col in data.columns:
    data[assigned_col] = data[assigned_col].apply(map_assigned)

# 8. Save the Output and download
output_path = 'migration_contacts_output.csv'
data.to_csv(output_path, index=False)

# Provide download link for output
from google.colab import files
files.download(output_path)

print("The file is ready for download.")